# SOURCE: https://sites.google.com/site/mrxpalmeiras/vault-cheat-sheet
# NOTE: All values used in this are dummy values

# Write a secret
vault write secret/users password=a341xr09

# write multiple values
vault write secret/users name=joe lastname=smith age=39

# write a JSON structure as a secret (from a JSON file)
vault write secret/apps/maestro @/opt/maestro/config.dev.json

# read secret
vault read secret/users

# read secret in JSON, use 'jq' to parse JSON output
vault read -format=json secret/users | jq .data.password

# read secret in JSON, use python to parse JSON output
vault read -format=json secret/users | python -c 'import sys,json; print json.load(sys.stdin)["data"]["password"]'

# show all secret keys
vault list secret

# delete secret
vault delete secret/users

# Wrap/Unwrap tokens
# This example shows how to create a secret token to access and get configuration data from a JSON file, then wrapping that secret token into a temporary WRAP token. The WRAP token is then given out to the customer (human or application) to be used to get into Vault, unwrap the Secret token, and use the Secret token to unlock the JSON config secret data.
# Create a MAESTRO (or your App name) Token
# <EXAMPLE OUPUT> token: ce61c443-e602-496e-dbb7-5fbe3921fc95
vault token create --display-name "maestro"

# Export the token
export MAESTRO_TOKEN=ce61c443-e602-496e-dbb7-5fbe3921fc95

# Write a secret to a path, in this case its a JSON config file with passwords in it,
vault write secret/apps/maestro @/opt/maestro/config.dev.json

# should get a JSON dump. This confirms MAESTRO token is working.
# Create a Wrapper Token that will Wrap around MAESTRO_TOKEN,
# <EXAMPLE OUPUT> token: 7d791fa1-6157-c641-fddd-ca0eeba0505c  (set to 60 min lifetime, only valid for 5 min by default)
vault write sys/wrapping/wrap -wrap-ttl=60 token=$MAESTRO_TOKEN

# export wrap token
export WRAP_TOKEN=7d791fa1-6157-c641-fddd-ca0eeba0505c

# Send the WRAP token to the customer

# Customer unwraps the MAESTRO token using the WRAP token
vault unwrap 7d791fa1-6157-c641-fddd-ca0eeba0505c

# 2018/04/12 11:00:03.596305 [INFO ] expiration: revoked lease: lease_id=sys/wrapping/wrap/aff6ad7fdd4be451bab07b98c566af150efc4817
# Key      Value
# ---      -----
# token    ce61c443-e602-496e-dbb7-5fbe3921fc95 (MAESTRO token!)


## CUSTOM BACKEND & MOUNTS
# custom backends can be created or 'mounted', using "Generic" type
vault mount -path myStuff -description="my secrets" generic

# check mounts
vault mounts

# -----------------------------------------------------------------------------------------------------------------------------
# Path        Type     Default TTL   Max TTL    Description
# cubbyhole/ cubbyhole n/a           n/a        per-token private secret storage
# myStuff/   generic   system        system     my stuff
# secret/    generic   system        system     generic secret storage
# sys/       system    n/a            n/a       system endpoints used for control
# -----------------------------------------------------------------------------------------------------------------------------

# write to your custom backend
vault write myStuff/info id=123 region=US rank=3

vault read myStuff/info
# -----------------------------------------------------------------------------------------------------------------------------
# Key Value
# --- -----
# refresh_interval 768h0m0s
# id 123
# rank 3
# region US
# -----------------------------------------------------------------------------------------------------------------------------

# unmount your backend
vault unmount myStuff

# ACL POLICY

# (Access Control List)
# Access control policies in Vault control what a user can access, these are the ultimate controllers of who can see what
# for example:
# -----------------------------------------------------------------------------------------------------------------------------
# path "secret/jira/password" {
#    policy = "read"
# }
# -----------------------------------------------------------------------------------------------------------------------------

# only allows a read on the password, to whoever is accessing it

# create new file called dev.hcl
# -----------------------------------------------------------------------------------------------------------------------------
# name = "dev"
#
# path "secret/*" {
#     policy = "write"
# }
#
# path "myCorp/projectA/database/password" {
#     policy = "read"
# }
#
# path "auth/token/lookup-self" {
#     policy = "read"
# }
# -----------------------------------------------------------------------------------------------------------------------------

# write the policy
vault policy write mypolicy ACL.hcl

# your policy is now written in-memory
# see all written policies
vault policy list

# see your specific policy
vault policy read mypolicy

# -----------------------------------------------------------------------------------------------------------------------------
# path "secret/*" {
#    policy = "write"
# }
# path "secret/projectA/database/password" {
#    policy = "read"
# }
# path "auth/token/lookup-self" {
#    policy = "read"
# }
# -----------------------------------------------------------------------------------------------------------------------------

## AUTH BACKEND - TOKENS
# create a token
vault token create

# -----------------------------------------------------------------------------------------------------------------------------
# Key Value
# --- -----
# token e032a2fd-8c25-1746-f5b6-ef7497d5ed65
# token_accessor 7ec939a8-ae11-4ebe-5bba-facf97066167
# token_duration 0s
# token_renewable false
# token_policies [root]
# -----------------------------------------------------------------------------------------------------------------------------

# create token for specific policy
vault token create -policy=myPolicy

# create time-based token for specific policy, can only use it 3 times, then it self-destructs
vault token create -policy=maestro -period=120m -use-limit=3

# -----------------------------------------------------------------------------------------------------------------------------
# Key                Value
# ---                -----
# token              7eb6c3d4-a396-8c6f-bca4-0ba5aca53df9
# token_accessor     90aac38c-a4a3-8983-b5b5-f11313b0f7f3
# token_duration     2h
# token_renewable    true
# token_policies     [default maestro]
# -----------------------------------------------------------------------------------------------------------------------------

# revoke a token
vault token revoke

# authenticate with token (only for cmd line)
vault auth 0e2b4e8e-e15d-c2b0-1354-2546ce42fde7

# revoke all tokens for a secret
vault revoke -prefix secret/users/password

# lookup current token info
vault token-lookup

# generate a new ROOT token (root tokens never expire and have access to everything)
unseal Vault
# generate 1 time password
vault generate-root -genotp
# OTP: qIoKVrKsaLOzBqYTxX1r0A==

# get encoded root token
vault generate-root -otp qIoKVrKsaLOzBqYTxX1r0A==

# -----------------------------------------------------------------------------------------------------------------------------
# 2017/03/16 13:43:20.166090 [INFO ] core: root generation initialized: nonce=bff2360c-9366-2385-dc15-fc842a0a83a5
# Root generation operation nonce: bff2360c-9366-2385-dc15-fc842a0a83a5
#
# Key(will be hidden): provide $VAULT_UNSEAL_KEY here
#
# 2017/03/16 13:51:13.114477 [INFO ] core: root generation finished: nonce=bff2360c-9366-2385-dc15-fc842a0a83a5
# Nonce: bff2360c-9366-2385-dc15-fc842a0a83a5
# Started: true
# Rekey Progress: 1
# Required Keys: 1
# Complete: true
# Encoded root token: JilLZtsUVHzwUHU2rMMcvg==
# -----------------------------------------------------------------------------------------------------------------------------

# decode encoded root token
vault generate-root -otp qIoKVrKsaLOzBqYTxX1r0A== -decode=JilLZtsUVHzwUHU2rMMcvg==
# -----------------------------------------------------------------------------------------------------------------------------
# Root token: 8ea34130-69b8-3ccf-4356-d32569be776e
# -----------------------------------------------------------------------------------------------------------------------------

## AUTH BACKEND - AppRoles

# check available auth methods
vault auth -methods

# enable approle
vault auth-enable approle

# create AppRole
vault write -f auth/approle/role/nyc-admins

# get Role ID
vault read auth/approle/role/testrole/role-id

# get Secret ID for role
vault write -f auth/approle/role/testrole/secret-id

# login with Role
vault write auth/approle/login role_id=ROLE_ID secret_id=SECRET_ID

# EXAMPLE

# get MYSQL passwords making calls from another machine

# -----------------------------------------------------------------------------------------------------------------------------
# create policy 'mysql'
#
# mysql.hcl
#
# path "sys/*" {
#    policy = "deny"
# }
#
# path "my_corp/mysql/*" {
#    policy = "read"
# }
# -----------------------------------------------------------------------------------------------------------------------------

# create role called 'nyc-admins'
vault write -f auth/approle/role/nyc-admins


# associate Role to a set of policies
vault write auth/approle/role/nyc-admins policies=mysql, devs

# get the Role ID of the role
vault read auth/approle/role/nyc-admins/role-id

# -----------------------------------------------------------------------------------------------------------------------------
# Key     Value
# ---     -----
# role_id ca1dbec4-37f1-61a2-8a83-87a3d980d8b9
# -----------------------------------------------------------------------------------------------------------------------------

# get a Secret ID for the role
vault write -f auth/approle/role/nyc-admins/secret-id

# -----------------------------------------------------------------------------------------------------------------------------
# Key                Value
# ---                -----
# secret_id          445f6eab-4207-a45b-b6b8-a3e86f128fcc
# secret_id_accessor c7da2183-3d68-31c6-70ef-b0d9081e6ceb
# -----------------------------------------------------------------------------------------------------------------------------

# get a token cred for this role
vault write auth/approle/login role_id=ca1dbec4-37f1-61a2-8a83-87a3d980d8b9 secret_id=445f6eab-4207-a45b-b6b8-a3e86f128fcc

# save it as $VAULT_TOKEN
# from machine123, get the credentials for mysql
curl -X GET -H "X-Vault-Token:$VAULT_TOKEN" http://<IP of Vault Server>:8200/v1/secrets/mysql

# -----------------------------------------------------------------------------------------------------------------------------
# {"request_id":"18b7ed7b-d349-6132-3ea4-20e4dbd6d9a5","lease_id":"","renewable":false,"lease_duration":2764800,"data":{"pw":"abcdef","server":"mysql23.corp"},"wrap_info":null,"warnings":null,"auth":null}
# -----------------------------------------------------------------------------------------------------------------------------
